this.mochikit=this.mochikit||{},this.mochikit.logging=function(t){"use strict";function n(t){return t&&"function"==typeof t.write&&"function"==typeof t.end&&"function"==typeof t.on&&"function"==typeof t.off}function e(...t){return t.every(t=>t instanceof c)}function i(t){console.log(`LEVEL: ${t.level}\nHAS_LOGGER: ${!!t.logger}\nDATA:\n${t.data}`)}function r(t){return function(n){return consoleLogger.log(t,n)}}function s(t){f.stream=t}function o(t){return f}var u=Object.freeze({OFF:0,ERROR:10,WARN:20,INFO:30,DEBUG:40,TRACE:50});class l{constructor(){this.handlers=[]}addHandler(t){if("function"!=typeof t)throw new Error("Not a function.");return this.handlers.push(t),this}fire(t){this.handlers.forEach(n=>n(t))}isEmpty(){return 0===this.handlers.length}isNotEmpty(){return!this.isEmpty()}clear(){return this.handlers=[],this}}class h{constructor(t){if(!n(t))throw new Error("Expected a WritableStream");this.stream=t,this.messages=0,this.level=0,this.handlers=new l}addHandler(t){return this.handlers.addHandler(t),this}fireHandlers(t){this.handlers.fire()}isHandlersEmpty(){return this.handlers.isEmpty()}isHandlersNotEmpty(){return!this.isHandlersEmpty()}clearHandlers(){return this.handlers.clear(),this}isLevelAvailable(t){return 0!==this.level&&~~t<=this.level}isErrorAvailable(){return this.isLevelAvailable(10)}isWarnAvailable(){return this.isLevelAvailable(20)}isInfoAvailable(){return this.isLevelAvailable(30)}isDebugAvailable(){return this.isLevelAvailable(40)}isTraceAvailable(){return this.isLevelAvailable(50)}isOff(){return 0===this.level}isOn(){return!this.isOff()}log(t,n){return this.isLevelAvailable(t)&&(this.stream.write(n),this.addMessage()),this}addMessage(){++this.messages}error(t){return this.log(10,t)}warn(t){return this.log(20,t)}info(t){return this.log(30,t)}debug(t){return this.log(40,t)}trace(t){return this.log(50,t)}logError(t){return this.log(10,`ERROR: ${t}`)}logWarn(t){return this.log(20,`WARN: ${t}`)}logInfo(t){return this.log(30,`INFO: ${t}`)}logTrace(t){return this.log(50,`TRACE: ${t}`)}logDebug(t){return this.log(40,`DEBUG: ${t}`)}clone(){let t=new h(this.stream);return t.level=this.level,t}__repr__(){return`Logger(${this.level}, ${this.messages})`}reset(){return this.level=0,this.messages=0,this}equals(t){return this.matchingLevel(t)&&this.matchingMessages(t)}matchingLevel(t){return t.level===this.level}matchingMessages(t){return t.messages===this.messages}}class c{constructor(t,n,e){this.level=t,this.data=n,this.logger=e,this.timestamp=Date.now()}}let f=new h({write(t){console.log(t)},on(){},off(){},end(){}}),a=r(10),g=r(20),v=r(30),m=r(40),d=r(50);return t.__repr__="[MochiKit.Logger]",t.logMethod=r,t.logError=a,t.logWarn=g,t.logInfo=v,t.logDebug=m,t.logTrace=d,t.Level=u,t.Logger=h,t.setCurrentLogger=s,t.getCurrentLogger=o,t.isLogMessage=e,t.isStream=n,t.LogMessage=c,t.printMessage=i,t}({});
